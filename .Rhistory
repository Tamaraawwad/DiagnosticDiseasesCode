"مركز محمد بن راشد آل مكتوم / مديرية صحة نابلس",
"مركز الأمراض المزمنة و الجلدية")
,ident_clinic:=T]
table7 <- decripdiag_2017[DM2==T & ident_clinic==T,
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`
)]
openxlsx :: write.xlsx(table7,
file.path(org::PROJ$SHARED_TODAY,"2017DM2.xlsx"))
table07 <- decripdiag_2017[DM2==T & ident_clinic==T,
.(
N=.N
),
keyby=Organization
]
openxlsx :: write.xlsx(table07,
file.path(org::PROJ$SHARED_TODAY,"2017DM2perorg.xlsx"))
#data cleaning for 2016
diag_2016[,PatientDoB:=as.Date(`Patient DoB`, format="%d-%m-%Y")]
diag_2016[,admissiondate:=as.Date(`Admission Date`, format="%d-%m-%Y")]
diag_2016[,age:= as.numeric(difftime(as.Date(admissiondate), as.Date(PatientDoB), units="days"))/365.25]
diag_2016[, age:= round(age, digits=0)]
diag_2016[,age_cat:=cut(age,
breaks = c(0,20,30,40,50,60,100)
,include.lowest=T)]
diag_2016[,id_within_baradmission:=1:.N,by=BARADMISSIONID]
xtabs(~diag_2016$id_within_baradmission)
decripdiag_2016 <- diag_2016[id_within_baradmission==1]
nrow(decripdiag_2016)
setDT(decripdiag_2016)
nrow(diag_2016)
diagnosedm6 <- xtabs(~decripdiag_2016$`Diagnose Name`)
openxlsx :: write.xlsx(diagnosedm6,
file.path(org::PROJ$SHARED_TODAY,"2016diagnosis.xlsx"))
diagnosedm6 <- xtabs(~diag_2016$`Diagnose Name`)
decripdiag_2016 [`Diagnose Name`%in% c("Type 2 diabetes mellitus"	,
"Type 2 diabetes mellitus with circulatory complications",
"Type 2 diabetes mellitus with diabetic arthropathy",
"Type 2 diabetes mellitus with diabetic cataract",
"Type 2 diabetes mellitus with diabetic chronic kidney disease",
"Type 2 diabetes mellitus with diabetic dermatitis",
"Type 2 diabetes mellitus with diabetic nephropathy",
"Type 2 diabetes mellitus with diabetic neuropathic arthropathy",
"Type 2 diabetes mellitus with diabetic neuropathy, unspecified"	,
"Type 2 diabetes mellitus with diabetic peripheral angiopathy with gangrene",
"Type 2 diabetes mellitus with diabetic peripheral angiopathy without gangrene",
"Type 2 diabetes mellitus with diabetic polyneuropathy",
"Type 2 diabetes mellitus with foot ulcer",
"Type 2 diabetes mellitus with hyperglycemia",
"Type 2 diabetes mellitus with hyperosmolarity"	,
"Type 2 diabetes mellitus with hyperosmolarity with coma",
"Type 2 diabetes mellitus with hyperosmolarity without nonketotic hyperglycemic-hyperosmolar coma (NKHHC)"	,
"Type 2 diabetes mellitus with hypoglycemia",
"Type 2 diabetes mellitus with hypoglycemia with coma"	,
"Type 2 diabetes mellitus with hypoglycemia without coma"	,
"Type 2 diabetes mellitus with kidney complications"	,
"Type 2 diabetes mellitus with mild nonproliferative diabetic retinopathy"	,
"Type 2 diabetes mellitus with moderate nonproliferative diabetic retinopathy"	,
"Type 2 diabetes mellitus with neurological complications"	,
"Type 2 diabetes mellitus with ophthalmic complications"	,
"Type 2 diabetes mellitus with other circulatory complications"	,
"Type 2 diabetes mellitus with other diabetic arthropathy"	,
"Type 2 diabetes mellitus with other diabetic kidney complication"	,
"Type 2 diabetes mellitus with other diabetic neurological complication"	,
"Type 2 diabetes mellitus with other diabetic ophthalmic complication"	,
"Type 2 diabetes mellitus with other oral complications"	,
"Type 2 diabetes mellitus with other skin complications"	,
"Type 2 diabetes mellitus with other skin ulcer"	,
"Type 2 diabetes mellitus with other specified complication"	,
"Type 2 diabetes mellitus with other specified complications"	,
"Type 2 diabetes mellitus with proliferative diabetic retinopathy"	,
"Type 2 diabetes mellitus with severe nonproliferative diabetic retinopathy without macular edema"	,
"Type 2 diabetes mellitus with skin complications"	,
"Type 2 diabetes mellitus with unspecified complications"	,
"Type 2 diabetes mellitus with unspecified diabetic retinopathy"	,
"Type 2 diabetes mellitus with unspecified diabetic retinopathy with macular edema"	,
"Type 2 diabetes mellitus with unspecified diabetic retinopathy without macular edema"	,
"Type 2 diabetes mellitus without complications",
"Type 2 diabetes mellitus with mild nonproliferative diabetic retinopathy with macular edema")
,DM2:=T]
organdm6 <- xtabs(~decripdiag_2016$Organization)
openxlsx :: write.xlsx(organdm6,
file.path(org::PROJ$SHARED_TODAY,"2016organization.xlsx"))
decripdiag_2016[Organization%in% c("Ramallah PHC",
"Nablus PHC",
"Azzoun Clinic",
"Al Karantina Clinic",
"Tarqumia Clinic",
"Qalqilia PHC",
"مركز محمد بن راشد آل مكتوم / مديرية صحة نابلس")
,ident_clinic:=T]
xtabs(~decripdiag_2016$ident_clinic)
nrow(decripdiag_2016)
table6 <- decripdiag_2016[DM2==T & ident_clinic==T,
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`
)]
openxlsx :: write.xlsx(table6,
file.path(org::PROJ$SHARED_TODAY,"2016DM2.xlsx"))
#for each clinics the size of patients with dm2 in 2019
table06 <- decripdiag_2016[DM2==T & ident_clinic==T,
.(
N=.N
),
keyby=Organization
]
openxlsx :: write.xlsx(table06,
file.path(org::PROJ$SHARED_TODAY,"2016DM2perorg.xlsx"))
#run 2016,2017,2018,2019 scripts first
d <- rbind(decripdiag_2019,decripdiag_2018, decripdiag_2017, decripdiag_2016, fill=TRUE)
nrow(d)
# error appeared that the class is different between 2 columns
str(decripdiag_2016)
str(decripdiag_2017)
nrow(decripdiag_2018)
nrow(decripdiag_2016)
d[year=="2018"]
decripdiag_2018[year==2018]
decripdiag_2019[year==2019]
diag_2019[Organization ==" مركز محمد بن راشد آل مكتوم / مديرية صحة نابلس"]
diag_2019[Organization %in% c(" مركز محمد بن راشد آل مكتوم / مديرية صحة نابلس")]
decripdiag_2018[Organization =="Ramallah PHC"]
diag_2018[BARADMISSIONID==2001021085467]
t <- decripdiag_2018[BARADMISSIONID==2001021085467]
openxlsx :: write.xlsx(t,
file.path(org::PROJ$SHARED_TODAY,"77.xlsx"))
#demographic characters for dm2 in 2019 at ramallah
table9R<- d[DM2==T & Organization %in% c("Ramallah PHC"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9R,
file.path(org::PROJ$SHARED_TODAY,"DM2ramallah.xlsx"))
#demographic characters for dm2 in 2019 at nablus
table9n<- d[DM2==T & Organization%in% c("Nablus PHC"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9n,
file.path(org::PROJ$SHARED_TODAY,"DM2nablus.xlsx"))
table9a<- d[DM2==T & Organization%in% c("Azzoun Clinic"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9a,
file.path(org::PROJ$SHARED_TODAY,"DM2azzon.xlsx"))
table9k<- d[DM2==T & Organization%in% c("Al Karantina Clinic"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9k,
file.path(org::PROJ$SHARED_TODAY,"DM2karantina.xlsx"))
table9t<- d[DM2==T & Organization%in% c("Tarqumia Clinic"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9t,
file.path(org::PROJ$SHARED_TODAY,"DM2tarqumia.xlsx"))
table9q<- d[DM2==T & Organization%in% c("Qalqilia PHC"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9q,
file.path(org::PROJ$SHARED_TODAY,"DM2qalqilia.xlsx"))
table9m<- d[DM2==T & Organization %in% c("مركز محمد بن راشد آل مكتوم / مديرية صحة نابلس"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9m,
file.path(org::PROJ$SHARED_TODAY,"DM2markezmohammad.xlsx"))
table9ma<- d[DM2==T & Organization%in% c("مركز الأمراض المزمنة و الجلدية"),
.(
N=.N
),
keyby=
.(`Patient Sex`,
age_cat,
`Marital Status`,
year
)]
openxlsx :: write.xlsx(table9ma,
file.path(org::PROJ$SHARED_TODAY,"DM2markezamrad.xlsx"))
## to do predictive model
tablepredic<- d[DM2==T,
.(
NumberofDiabeticpatient=.N
),
keyby=
.(
year
)]
openxlsx :: write.xlsx(tablepredic,
file.path(org::PROJ$SHARED_TODAY,"DM2predict.xlsx"))
#create an aggregated dataset of the number of diabetic patients every year/month
#run a poisson regression, with
#outcome = # diabetic patients
#  exposures = year (continuous) and month (factor)
poissonmodel <- glm(NumberofDiabeticpatient~year, tablepredic, family = "poisson")
summary(poissonmodel)
pred_data <- data.table(year=2015:2025)
predicted <- predict(poissonmodel, pred_data)
pred_data[,predicted:=exp(predicted)]
#by month
d[,month:=lubridate::month(admissiondate)]
xtabs(~d$`Admission Date`)
tablepredicm<- d[DM2==T,
.(
NumberofDiabeticpatient=.N
),
keyby=
.(
year,
month
)]
openxlsx :: write.xlsx(tablepredicm,
file.path(org::PROJ$SHARED_TODAY,"DM2real.xlsx"))
poissonmodelm <- glm(NumberofDiabeticpatient~year+as.factor(month), tablepredicm, family = "poisson")
summary(poissonmodelm)
plot(poissonmodelm)
#as.factor ....because otherwise 'month' is treated as continuous (edited)
#which means "the difference between january and february is the same as the difference between november and december"
#it means something like "every month the number of patients increases by 1%, until we go december -> january, then it drops by 12%"
#if you put month as a factor, then it models each month individually
# expand.grid means create a data.table with all possible combinations
pred_data <- data.table(expand.grid(year=2015:2025,month=1:12))
predicted <- predict(poissonmodelm, pred_data)
pred_data[,predicted:=exp(predicted)]
openxlsx :: write.xlsx(pred_data,
file.path(org::PROJ$SHARED_TODAY,"DM2predictm.xlsx"))
# make a graph
# plotting the observed and predicted data
# x-axis as time, y-axis as number of observation
library(rlang)
library(tidyverse)
install.packages("devtools")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
ggplot(data = pred_data) +
geom_point(mapping = aes(x = time, y = "number of observations"))
# creating folders, SHARED it is an argument to the function org::InitialiseProject
#shared ....it will create a folder inside with a date
org::AllowFileManipulationFromInitialiseProject()
org::InitialiseProject(
HOME = "C:/Users/enasa/OneDrive/Documents/Diagnostic diseases/DiagnosticDiseasesCode",
DATA_RAW = "C:/Users/enasa/OneDrive/Documents/Diagnostic diseases/data_raw",
SHARED =  "C:/Users/enasa/OneDrive/Documents/Diagnostic diseases/results"
)
library(readxl)
library(openxlsx)
library(data.table)
library(gmodels)
#in general if I want to take a quick view on any data, i can work on data frame
# and do some xtabs and crosstabs, chisquare
# to create a new variable in ....data.frame:
#   data$variable <- 3
# data.table:
#   data[,variable:=3]
#creating vectors for data raw
#DIAGNOSTIC DATA
diag_2019 <- read_excel(file.path(org::PROJ$DATA_RAW, "Diag Data" ,"2019.xlsx"))
diag_2018 <- read_excel(file.path(org::PROJ$DATA_RAW, "Diag Data" ,"2018.xlsx"))
diag_2017 <- read_excel(file.path(org::PROJ$DATA_RAW, "Diag Data" ,"2017.xlsx"))
diag_2016 <- read_excel(file.path(org::PROJ$DATA_RAW, "Diag Data" ,"2016.xlsx"))
# Drugs Data
drug_2019 <- read_excel(file.path(org::PROJ$DATA_RAW, "Drugs Data" ,"2019.xlsx"))
drug_2018 <- read_excel(file.path(org::PROJ$DATA_RAW, "Drugs Data" ,"2018.xlsx"))
drug_2017 <- read_excel(file.path(org::PROJ$DATA_RAW, "Drugs Data" ,"2017.xlsx"))
drug_2016 <- read_excel(file.path(org::PROJ$DATA_RAW, "Drugs Data" ,"2016.xlsx"))
#Lab Data
lab_2019 <- read_excel(file.path(org::PROJ$DATA_RAW, "Lab Data" ,"2019.xlsx"))
# lab_2018 <- read_excel(file.path(org::PROJ$DATA_RAW, "Lab Data" ,"2018.xlsx"))
# lab_2017 <- read_excel(file.path(org::PROJ$DATA_RAW, "Lab Data" ,"2017.xlsx"))
# lab_2016 <- read_excel(file.path(org::PROJ$DATA_RAW, "Lab Data" ,"2016.xlsx"))
#Observation Data
obs_2019 <- read_excel(file.path(org::PROJ$DATA_RAW, "observation Data" ,"2019.xlsx"))
# obs_2018 <- read_excel(file.path(org::PROJ$DATA_RAW, "observation Data" ,"2018.xlsx"))
# obs_2017 <- read_excel(file.path(org::PROJ$DATA_RAW, "observation Data" ,"2017.xlsx"))
# obs_2016 <- read_excel(file.path(org::PROJ$DATA_RAW, "observation Data" ,"2016.xlsx"))
# transform to data tabels 2019 database and creating new attributes
setDT(diag_2019)
diag_2019[,ident_diag:=TRUE]
setDT(drug_2019)
drug_2019[,ident_drug:=TRUE]
setDT(lab_2019)
lab_2019[,ident_lab:=TRUE]
setDT(obs_2019)
obs_2019[,ident_obs:=TRUE]
#View(diag_2019)
#some data cleaning &  some decriptive analysis
xtabs(~diag_2019$`Patient DoB`)
#how to creat age variable from date of birth
#unique(diag_2019$Patient DoB`
#d[, age := as.numeric(difftime(as.Date("2019-01-01"), as.Date(date_of_birth), units="days"))/365.25]
unique(diag_2019$`Patient DoB`)
diag_2019[,PatientDoB:=as.Date(`Patient DoB`, format="%d-%m-%Y")]
diag_2019[,admissiondate:=as.Date(`Admission Date`, format="%d-%m-%Y")]
diag_2019[,age:= as.numeric(difftime(as.Date(admissiondate), as.Date(PatientDoB), units="days"))/365.25]
diag_2019[, age:= round(age, digits=0)]
diag_2019[,age_cat:=cut(age,
breaks = c(0,20,30,40,50,60,100)
,include.lowest=T)]
diag_2019[,id_within_baradmission:=1:.N,by=BARADMISSIONID]
xtabs(~diag_2019$id_within_baradmission)
decripdiag_2019 <- diag_2019[id_within_baradmission==1]
nrow(decripdiag_2019)
setDT(decripdiag_2019)
nrow(diag_2019)
xtabs(~decripdiag_2019$`Patient Sex`)
xtabs(~decripdiag_2019$`Marital Status`)
xtabs(~decripdiag_2019$age_cat)
org<-xtabs(~decripdiag_2019$Organization)
openxlsx :: write.xlsx(org,
file.path(org::PROJ$SHARED_TODAY,"2019organization.xlsx"))
xtabs(~decripdiag_2019$`Admission Status`)
xtabs(~decripdiag_2019$`Admission Hosp/Dept Name`)
departments <- unique(decripdiag_2019$`Admission Hosp/Dept Name`)
openxlsx :: write.xlsx(departments,
file.path(org::PROJ$SHARED_TODAY,"2019depatrment.xlsx"))
xtabs(~decripdiag_2019$`Medical Order Note`)
unique(drug_2019$NAME)
drugs <- xtabs(~drug_2019$NAME)
openxlsx :: write.xlsx(drugs,
file.path(org::PROJ$SHARED_TODAY,"2019drugs.xlsx"))
drugs8 <- xtabs(~drug_2018$NAME)
openxlsx :: write.xlsx(drugs8,
file.path(org::PROJ$SHARED_TODAY,"2018drugs.xlsx"))
drugs7 <- xtabs(~drug_2017$NAME)
openxlsx :: write.xlsx(drugs7,
file.path(org::PROJ$SHARED_TODAY,"2017drugs.xlsx"))
drugs6 <- xtabs(~drug_2016$NAME)
openxlsx :: write.xlsx(drugs6,
file.path(org::PROJ$SHARED_TODAY,"2016drugs.xlsx"))
labtests <- xtabs(~lab_2019$`Labtest Name`)
openxlsx :: write.xlsx(labtests,
file.path(org::PROJ$SHARED_TODAY,"2019labtests.xlsx"))
#creat new variable age in prescdiag2019
View(diag_2019)
names(diag_2019)
dim(diag_2019)
str(diag_2019)
unique(diag_2019$`Diagnose Name`)
tam <- xtabs(~decripdiag_2019$'Diagnose Name')
#file.path(org::PROJ$DATA_RAW,"2019.xlsx")
#use SHARED TODAY FOR RESULTS
openxlsx :: write.xlsx(tam,
file.path(org::PROJ$SHARED_TODAY,"2019diagnosis.xlsx"))
barplot(tam, main="Diagnosis Distribution",
xlab="Number of cases")
counts <- table(diag_2019$'Diagnose Name')
library(gmodels)
tamm <- CrossTable (diag_2019$`Diagnose Name`,diag_2019$Organization,addNA=T)
openxlsx :: write.xlsx(tamm,
file.path(org::PROJ$SHARED_TODAY,"2019cross.xlsx"))
# #table <- diag_2019[,
#
#               .(
#                 N=.N,
#
#                 DM=sum(`Medical Order Id`,na.rm = T)
#                 ),
#
#               keyby=
#               .(Organization
#
#               )]
#merging data sets 2019
#to do check on duplicated cases ...
#d[question, assignment, group/by]
#diag_2019[BARADMISSIONID == 2001021117768]
# we need to merge diag and lab by bara &medical order id
#then merge with obs by bara,medical, and admition date
#then with drugs by bara  ....more than one drug
xtabs(~diag_2019$id_within_baradmission)
#diag_2019 <- diag_2019[id_within_baradmission==1]
nrow(diag_2019)
labd2019 <- merge(diag_2019, lab_2019, by=c("BARADMISSIONID", "Medical Order Id"))
nrow(labd2019)
obs2019 <- merge(diag_2019, obs_2019, by=c("BARADMISSIONID", "Medical Order Id"))
nrow(obs2019)
diag_2019 <- diag_2019[id_within_baradmission==1]
dru2019 <- merge(diag_2019, drug_2019, by="BARADMISSIONID")
nrow(dru2019)
dru2019[BARADMISSIONID == 2001307447169]
org::AllowFileManipulationFromInitialiseProject()
org::InitialiseProject(
HOME = "C:/Users/enasa/OneDrive/Documents/Diagnostic diseases/DiagnosticDiseasesCode",
DATA_RAW = "C:/Users/enasa/OneDrive/Documents/Diagnostic diseases/data_raw",
SHARED =  "C:/Users/enasa/OneDrive/Documents/Diagnostic diseases/results"
)
library(readxl)
library(openxlsx)
library(data.table)
library(gmodels)
#step 1. load in all the data
diag_2019 <- read_excel(file.path(org::PROJ$DATA_RAW, "Diag data" ,"2019.xlsx"))
drugs_2019 <- read_excel(file.path(org::PROJ$DATA_RAW, "Drugs data" ,"2019.xlsx"))
setDT(diag_2019)
diag_2019[,ident_diag:=TRUE]
setDT(drug_2019)
drug_2019[,ident_drug:=TRUE]
diag_2019[,id_within_baradmission:=1:.N,by=BARADMISSIONID]
xtabs(~diag_2019$id_within_baradmission)
drug_2019[,id_within_baradmission:=1:.N,by="BARADMISSIONID"]
xtabs(~drug_2019$id_within_baradmission)
names(drug_2019)
#dcast(DATATABLE, variables that uniquely identify rows ~ the values as your new columns)
#value.var: you have your rows, your columns, and the variable you are shifting: which is this
nrow(drug_2019)
widedrug_2019 <- dcast.data.table(drug_2019,BARADMISSIONID~id_within_baradmission,value.var=c("CODE","NAME","ident_drug"))
openxlsx :: write.xlsx(widedrug_2019,
file.path(org::PROJ$SHARED_TODAY,"2019grugswide.xlsx"))
dcastformula
widedrug_2019[]
#step 2. merge
# d2019 <- merge(diag_2019, drug_2019, by="BARADMISSIONID")
# d2019 <- merge(diag_2019, drug_2019, by=c("BARADMISSIONID","CODE"))
#
#
# #step 3. check to see you haven't missed/duplicated anyone
#
#
# nrow(diag_2019)
# nrow(drug_2019)
# nrow(d2019)
# nrow(decripdiag_2019)
#
d2019[BARADMISSIONID == 2001307447169]
diag_2019[Organization =="مركز محمد بن راشد آل مكتوم / مديرية صحة نابلس"]
diag_2019[Organization %in% c("مركز محمد بن راشد آل مكتوم / مديرية صحة نابلس")]
decripdiag_2018[Organization =="Ramallah PHC"]
diag_2018[BARADMISSIONID==2001021085467]
t <- decripdiag_2018[BARADMISSIONID==2001021085467]
openxlsx :: write.xlsx(t,
file.path(org::PROJ$SHARED_TODAY,"77.xlsx"))
t
d[,month:=lubridate::month(admissiondate)]
xtabs(~d$`Admission Date`)
tablepredicm<- d[DM2==T,
.(
NumberofDiabeticpatient=.N
),
keyby=
.(
year,
month
)]
openxlsx :: write.xlsx(tablepredicm,
file.path(org::PROJ$SHARED_TODAY,"DM2real.xlsx"))
poissonmodelm <- glm(NumberofDiabeticpatient~year+as.factor(month), tablepredicm, family = "poisson")
summary(poissonmodelm)
plot(poissonmodelm)
openxlsx :: write.xlsx(pred_data,
file.path(org::PROJ$SHARED_TODAY,"DM2predictm.xlsx"))
library(rlang)
library(tidyverse)
install.packages("devtools")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library(rlang)
library(tidyverse)
install.packages("devtools")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
